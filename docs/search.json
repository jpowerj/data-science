[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data Science Without Fear",
    "section": "",
    "text": "Preface\nThis book serves as an introduction to data science, written with the goal of meeting you wherever you’re at in your educational/career journey, regardless of your background in math or computer science. That is to say, we don’t assume any background in STEM, only the desire to learn and the work ethic to put in the hours needed to become comfortable with each topic!\nIt is the companion to the course DSAN5000: Data Science and Analytics, taught at Georgetown University in the Fall of 2023."
  },
  {
    "objectID": "00-intro.html",
    "href": "00-intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "01-ds-tools.html",
    "href": "01-ds-tools.html",
    "title": "2  Data Science Workflow",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "03-data-cleaning.html",
    "href": "03-data-cleaning.html",
    "title": "4  Data Cleaning and Tidy Data",
    "section": "",
    "text": "Data cleaning"
  },
  {
    "objectID": "13-conclusion.html",
    "href": "13-conclusion.html",
    "title": "14  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "00-intro.html#what-well-cover-today",
    "href": "00-intro.html#what-well-cover-today",
    "title": "1  Lecture 0: Welcome to DSAN5000!",
    "section": "1.1 What We’ll Cover Today",
    "text": "1.1 What We’ll Cover Today"
  },
  {
    "objectID": "00-intro.html#operating-systems",
    "href": "00-intro.html#operating-systems",
    "title": "1  Introduction",
    "section": "1.1 Operating Systems",
    "text": "1.1 Operating Systems\n\nLinux:  (Free!)\n\nThe “standard” OS for developers! You can expect instructions to use Linux commands: ls, cd, touch, mv …\n\nWindows:  BUT, proprietary shell (constantly googling “PowerShell equivalent”)\n\n\n\nLinux\nPowerShell\n\n\n\n\nls\nGet-ChildItem\n\n\ncd\nSet-Location\n\n\ntouch\nNew-Item\n\n\nmv\nMove-Item\n\n\n\nOSX:  BUT, OSX and Linux both built on Unix\n\\(\\implies\\) if you know Terminal you know Linux!"
  },
  {
    "objectID": "00-intro.html#git-vs.-github",
    "href": "00-intro.html#git-vs.-github",
    "title": "1  Introduction",
    "section": "1.2 Git vs. GitHub",
    "text": "1.2 Git vs. GitHub\nDespite the confusingly similar names, it is important to keep in mind the distinction between Git and GitHub!\n\nGit is a command-line program, which on its own just runs on your local computer and keeps track of changes to your code.\nGitHub, on the other hand, is a website which allows you to take your Git repositories and store them online, whether privately or publicly.\n\nThis means, for example, that (if your repository is public) once you push your code to GitHub, others can view it and download it for themselves.\n\n\nGit \n\nCommand-line program\ngit init in shell to create\ngit add to track files\ngit commit to commit changes to tracked files\n\n\nGitHub \n\nCode hosting website\nCreate a repository (repo) for each project\nCan clone repos onto your local machine\n\n\n\n\ngit push/git pull: The link between the two!"
  },
  {
    "objectID": "00-intro.html#git-diagram",
    "href": "00-intro.html#git-diagram",
    "title": "1  Introduction",
    "section": "1.3 Git Diagram",
    "text": "1.3 Git Diagram"
  },
  {
    "objectID": "00-intro.html#initializing-a-repo",
    "href": "00-intro.html#initializing-a-repo",
    "title": "1  Introduction",
    "section": "1.4 Initializing a Repo",
    "text": "1.4 Initializing a Repo\nLet’s make a directory for our project called cool-project, and initialize a Git repository for it:\n\nuser@hostname:~$ mkdir cool-project\nuser@hostname:~$ cd cool-project\nuser@hostname:~/cool-project$ git init\nInitialized empty Git repository in /home/user/cool-project/.git/\nThis creates a hidden folder, .git, in the directory:\n\nuser@hostname:~/cool-project$ ls -lah\ntotal 12K\ndrwxr-xr-x  3 user user 4.0K May 28 00:53 .\ndrwxr-xr-x 12 user user 4.0K May 28 00:53 ..\ndrwxr-xr-x  7 user user 4.0K May 28 00:53 .git"
  },
  {
    "objectID": "00-intro.html#adding-and-committing-a-file",
    "href": "00-intro.html#adding-and-committing-a-file",
    "title": "1  Introduction",
    "section": "1.5 Adding and Committing a File",
    "text": "1.5 Adding and Committing a File\nWe’re writing Python code, so let’s create and track cool_code.py:\nuser@hostname:~/cool-project$ touch cool_code.py\nuser@hostname:~/cool-project$ git add cool_code.py\nuser@hostname:~/cool-project$ git status\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   cool_code.py\n\nuser@hostname:~/cool-project$ git commit -m \"Initial version of cool_code.py\"\n[main (root-commit) b40dc25] Initial version of cool_code.py\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 cool_code.py"
  },
  {
    "objectID": "00-intro.html#the-commit-log",
    "href": "00-intro.html#the-commit-log",
    "title": "1  Introduction",
    "section": "1.6 The Commit Log",
    "text": "1.6 The Commit Log\nView the commit log using git log:\nuser@hostname:~/cool-project$ git log\ncommit b40dc252a3b7355cc4c28397fefe7911ff3c94b9 (HEAD -&gt; main)\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:57:16 2023 +0000\n\n    Initial version of cool_code.py\n\n\n\n\n\ngitGraph\n   commit id: \"b40dc25\""
  },
  {
    "objectID": "00-intro.html#making-changes",
    "href": "00-intro.html#making-changes",
    "title": "1  Introduction",
    "section": "1.7 Making Changes",
    "text": "1.7 Making Changes\nuser@hostname:~/cool-project$ git status\nOn branch main\nnothing to commit, working tree clean\nuser@hostname:~/cool-project$ echo \"1 + 1\" &gt;&gt; cool_code.py\nuser@hostname:~/cool-project$ more cool_code.py\n1 + 1\nuser@hostname:~/cool-project$ git add cool_code.py\nuser@hostname:~/cool-project$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   cool_code.py\n\nuser@hostname:~/cool-project$ git commit -m \"Added code to cool_code.py\"\n[main e3bc497] Added code to cool_code.py\n 1 file changed, 1 insertion(+)\nThe output of the git log command will show the new version:\nuser@hostname:~/cool-project$ git log\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224 (HEAD -&gt; main)\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12eassets/img/gh_history.png\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial version of cool_code.py"
  },
  {
    "objectID": "00-intro.html#section",
    "href": "00-intro.html#section",
    "title": "1  Introduction",
    "section": "1.13 ",
    "text": "1.13 \nThe final git log:\nuser@hostname:~/cool-project$ git log\ncommit 700d955faacb27d7b8bc464b9451851b5e319f20 (HEAD -&gt; main)\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:44:49 2023 +0000\n\n    Added different code to cool_code.py\n\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12e\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial (empty) version of cool_code.py"
  },
  {
    "objectID": "00-intro.html#more-changes",
    "href": "00-intro.html#more-changes",
    "title": "1  Introduction",
    "section": "1.8 More Changes",
    "text": "1.8 More Changes\nuser@hostname:~/cool-project$ echo \"2 + 2\" &gt;&gt; cool_code.py\nuser@hostname:~/cool-project$ more cool_code.py\n1 + 1\n2 + 2\nuser@hostname:~/cool-project$ git add cool_code.py\nuser@hostname:~/cool-project$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   cool_code.py\n\nuser@hostname:~/cool-project$ git commit -m \"Second version of cool_code.py\"\n[main 4007db9] Second version of cool_code.py\n 1 file changed, 1 insertion(+)"
  },
  {
    "objectID": "00-intro.html#and-the-git-log",
    "href": "00-intro.html#and-the-git-log",
    "title": "1  Introduction",
    "section": "1.9 And the git log",
    "text": "1.9 And the git log\nuser@hostname:~/cool-project$ git log\ncommit 4007db9a031ca134fe09eab840b2bc845366a9c1 (HEAD -&gt; main)\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:39:28 2023 +0000\n\n    Second version of cool_code.py\n\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12e\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial (empty) version of cool_code.py"
  },
  {
    "objectID": "00-intro.html#undoing-a-commit-i",
    "href": "00-intro.html#undoing-a-commit-i",
    "title": "1  Introduction",
    "section": "1.10 Undoing a Commit I",
    "text": "1.10 Undoing a Commit I\nFirst check the git log to find the hash for the commit you want to revert back to:\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py"
  },
  {
    "objectID": "00-intro.html#undoing-a-commit-ii",
    "href": "00-intro.html#undoing-a-commit-ii",
    "title": "1  Introduction",
    "section": "1.11 Undoing a Commit II",
    "text": "1.11 Undoing a Commit II\n\n This is irreversable! \n\nuser@hostname:~/cool-project$ git reset --hard e3bc497ac\nHEAD is now at e3bc497 Added code to cool_code.py\nuser@hostname:~/cool-project$ git log\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224 (HEAD -&gt; main)\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12e\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial (empty) version of cool_code.py"
  },
  {
    "objectID": "00-intro.html#onwards-and-upwards",
    "href": "00-intro.html#onwards-and-upwards",
    "title": "1  Introduction",
    "section": "1.12 Onwards and Upwards",
    "text": "1.12 Onwards and Upwards\nuser@hostname:~/cool-project$ echo \"3 + 3\" &gt;&gt; cool_code.py\nuser@hostname:~/cool-project$ git add cool_code.py\nuser@hostname:~/cool-project$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   cool_code.py\n\nuser@hostname:~/cool-project$ git commit -m \"Added different code to cool_code.py\"\n[main 700d955] Added different code to cool_code.py\n 1 file changed, 1 insertion(+)"
  },
  {
    "objectID": "00-intro.html#section-1",
    "href": "00-intro.html#section-1",
    "title": "1  Introduction",
    "section": "1.14 ",
    "text": "1.14 \nThe final git log:\nuser@hostname:~/cool-project$ git log\ncommit 700d955faacb27d7b8bc464b9451851b5e319f20 (HEAD -&gt; main)\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:44:49 2023 +0000\n\n    Added different code to cool_code.py\n\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12e\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial (empty) version of cool_code.py"
  },
  {
    "objectID": "00-intro.html#but-why-these-diagrams",
    "href": "00-intro.html#but-why-these-diagrams",
    "title": "1  Introduction",
    "section": "1.14 But Why These Diagrams?",
    "text": "1.14 But Why These Diagrams?\nEven the simplest projects can start to look like:\n\n\n\n\n\ngitGraph\n       commit id: \"537dd67\"\n       commit id: \"6639143\"\n       branch nice_feature\n       checkout nice_feature\n       commit id: \"937ded8\"\n       checkout main\n       commit id: \"9e6679c\"\n       checkout nice_feature\n       branch very_nice_feature\n       checkout very_nice_feature\n       commit id: \"7f4de03\"\n       checkout main\n       commit id: \"6df80c1\"\n       checkout nice_feature\n       commit id: \"bd0ebb8\"\n       checkout main\n       merge nice_feature id: \"9ff61cc\" tag: \"V 1.0.0\" type: HIGHLIGHT\n       checkout very_nice_feature\n       commit id: \"370613b\"\n       checkout main\n       commit id: \"9a07a97\""
  },
  {
    "objectID": "00-intro.html#the-github-side-remote",
    "href": "00-intro.html#the-github-side-remote",
    "title": "1  Introduction",
    "section": "1.15 The GitHub Side: Remote",
    "text": "1.15 The GitHub Side: Remote"
  },
  {
    "objectID": "00-intro.html#an-empty-repo",
    "href": "00-intro.html#an-empty-repo",
    "title": "1  Introduction",
    "section": "1.16 An Empty Repo",
    "text": "1.16 An Empty Repo"
  },
  {
    "objectID": "00-intro.html#refresh-after-git-push",
    "href": "00-intro.html#refresh-after-git-push",
    "title": "1  Introduction",
    "section": "1.17 Refresh after git push",
    "text": "1.17 Refresh after git push"
  },
  {
    "objectID": "00-intro.html#commit-history",
    "href": "00-intro.html#commit-history",
    "title": "1  Introduction",
    "section": "1.18 Commit History",
    "text": "1.18 Commit History"
  },
  {
    "objectID": "00-intro.html#checking-the-diff",
    "href": "00-intro.html#checking-the-diff",
    "title": "1  Introduction",
    "section": "1.19 Checking the diff",
    "text": "1.19 Checking the diff"
  },
  {
    "objectID": "00-intro.html#web-development",
    "href": "00-intro.html#web-development",
    "title": "1  Introduction",
    "section": "1.20 Web Development",
    "text": "1.20 Web Development\n\n\n\n\n\n\n\n\n\nFrontend   \nBackend   \n\n\n\n\nLow Level\nHTML/CSS/JavaScript\nGitHub Pages\n\n\nMiddle Level\nJS Libraries\nPHP, SQL\n\n\nHigh Level\nReact, Next.js\nNode.js, Vercel\n\n\n\n\nFrontend icons: UI+UI elements, what the user sees (on the screen), user experience (UX), data visualization Backend icons: Databases, Security"
  },
  {
    "objectID": "00-intro.html#getting-content-onto-the-internet",
    "href": "00-intro.html#getting-content-onto-the-internet",
    "title": "1  Introduction",
    "section": "1.21 Getting Content onto the Internet",
    "text": "1.21 Getting Content onto the Internet\n\n\nStep 1: index.html\n\n\nStep 2: Create GitHub repository\n\n\nStep 3: git init, git add -A ., git push\n\n\nStep 4: Enable GitHub Pages in repo settings\n\n\nStep 5: &lt;username&gt;.github.io!"
  },
  {
    "objectID": "00-intro.html#deploying-from-a-branchfolder",
    "href": "00-intro.html#deploying-from-a-branchfolder",
    "title": "1  Introduction",
    "section": "1.22 Deploying from a Branch/Folder",
    "text": "1.22 Deploying from a Branch/Folder"
  },
  {
    "objectID": "00-intro.html#r-vs.-rstudio-vs.-quarto",
    "href": "00-intro.html#r-vs.-rstudio-vs.-quarto",
    "title": "1  Introduction",
    "section": "1.23 R vs. RStudio vs. Quarto",
    "text": "1.23 R vs. RStudio vs. Quarto\n\n\n\n\n\n\n\n\n\n\n\n\n\nGUI wrapper around R (Integrated Development Environment = IDE)\nRun blocks of R code (.qmd chunks)\n\n\n\nThe R Language \n\nProgramming language\nRuns scripts via Rscript &lt;script&gt;.r \n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nGUI wrapper around Python (IDE)\nRun blocks of Python code (.ipynb cells)\n\n\n\n\nThe Python Language \n\nScripting language\nOn its own, just runs scripts via python &lt;script&gt;.py"
  },
  {
    "objectID": "00-intro.html#getting-r-onto-your-computer",
    "href": "00-intro.html#getting-r-onto-your-computer",
    "title": "1  Introduction",
    "section": "1.24 Getting R Onto Your Computer",
    "text": "1.24 Getting R Onto Your Computer\n\nDownload the R language: https://cran.r-project.org/\n\n\n\nVSCode (recommended)\n\nLinux | Windows | OSX\nInstall the Quarto Extension for VSCode (more info from Quarto here)\n\n\nRStudio\n\nRStudio Desktop"
  },
  {
    "objectID": "00-intro.html#python",
    "href": "00-intro.html#python",
    "title": "1  Introduction",
    "section": "1.25 Python",
    "text": "1.25 Python\n\nThe Python interpreter: Linux | Windows | OSX\nWith VSCode (recommended): you can start coding!\n\n\nmy_python_code.qmd\n\n```{python}\n1 + 1\n```\n\nWith Jupyter there are two options:\n\nJupyterLab (recommended) vs. Jupyter\nMain difference (imo): JupyterLab has a tabbed interface"
  },
  {
    "objectID": "00-intro.html#google-colab",
    "href": "00-intro.html#google-colab",
    "title": "1  Introduction",
    "section": "1.26 Google Colab",
    "text": "1.26 Google Colab\nAlternative when all else fails! https://colab.research.google.com/\n\nFully web-based Jupyter editing/execution (import/export .ipynb files)\nCan persist code/data to Google Drive\nDrawback: RAM limitations, have to activate GPU mode (pretty much required for any AI work), idle time limitation"
  },
  {
    "objectID": "00-intro.html#colab-runtime-options",
    "href": "00-intro.html#colab-runtime-options",
    "title": "1  Introduction",
    "section": "1.27 Colab Runtime Options",
    "text": "1.27 Colab Runtime Options"
  },
  {
    "objectID": "00-intro.html#next-week",
    "href": "00-intro.html#next-week",
    "title": "1  Introduction",
    "section": "1.28 Next Week",
    "text": "1.28 Next Week\nData Gathering and APIs"
  },
  {
    "objectID": "01-ds-tools.html#what-well-cover-today",
    "href": "01-ds-tools.html#what-well-cover-today",
    "title": "2  Data Science Workflow",
    "section": "2.1 What We’ll Cover Today",
    "text": "2.1 What We’ll Cover Today"
  },
  {
    "objectID": "01-ds-tools.html#operating-systems",
    "href": "01-ds-tools.html#operating-systems",
    "title": "2  Data Science Workflow",
    "section": "2.2 Operating Systems",
    "text": "2.2 Operating Systems\n\nLinux:  (Free!)\n\nThe “standard” OS for developers! You can expect instructions to use Linux commands: ls, cd, touch, mv …\n\nWindows:  BUT, proprietary shell (constantly googling “PowerShell equivalent”)\n\n\n\nLinux\nPowerShell\n\n\n\n\nls\nGet-ChildItem\n\n\ncd\nSet-Location\n\n\ntouch\nNew-Item\n\n\nmv\nMove-Item\n\n\n\nOSX:  BUT, OSX and Linux both built on Unix\n\\(\\implies\\) if you know Terminal you know Linux!"
  },
  {
    "objectID": "01-ds-tools.html#git-vs.-github",
    "href": "01-ds-tools.html#git-vs.-github",
    "title": "2  Data Science Workflow",
    "section": "2.3 Git vs. GitHub",
    "text": "2.3 Git vs. GitHub\n(Important distinction!)\n\n\nGit \n\nCommand-line program\ngit init in shell to create\ngit add to track files\ngit commit to commit changes to tracked files\n\n\nGitHub \n\nCode hosting website\nCreate a repository (repo) for each project\nCan clone repos onto your local machine\n\n\n\n\ngit push/git pull: The link between the two!"
  },
  {
    "objectID": "01-ds-tools.html#git-diagram",
    "href": "01-ds-tools.html#git-diagram",
    "title": "2  Data Science Workflow",
    "section": "2.4 Git Diagram",
    "text": "2.4 Git Diagram"
  },
  {
    "objectID": "01-ds-tools.html#initializing-a-repo",
    "href": "01-ds-tools.html#initializing-a-repo",
    "title": "2  Data Science Workflow",
    "section": "2.5 Initializing a Repo",
    "text": "2.5 Initializing a Repo\n\nLet’s make a directory for our project called cool-project, and initialize a Git repo for it\n\n\nuser@hostname:~$ mkdir cool-project\nuser@hostname:~$ cd cool-project\nuser@hostname:~/cool-project$ git init\nInitialized empty Git repository in /home/user/cool-project/.git/\n\nThis creates a hidden folder, .git, in the directory:\n\n\nuser@hostname:~/cool-project$ ls -lah\ntotal 12K\ndrwxr-xr-x  3 user user 4.0K May 28 00:53 .\ndrwxr-xr-x 12 user user 4.0K May 28 00:53 ..\ndrwxr-xr-x  7 user user 4.0K May 28 00:53 .git\n\nThe Git Side: Local I"
  },
  {
    "objectID": "01-ds-tools.html#adding-and-committing-a-file",
    "href": "01-ds-tools.html#adding-and-committing-a-file",
    "title": "2  Data Science Workflow",
    "section": "2.6 Adding and Committing a File",
    "text": "2.6 Adding and Committing a File\nWe’re writing Python code, so let’s create and track cool_code.py:\nuser@hostname:~/cool-project$ touch cool_code.py\nuser@hostname:~/cool-project$ git add cool_code.py\nuser@hostname:~/cool-project$ git status\nOn branch main\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n        new file:   cool_code.py\n\nuser@hostname:~/cool-project$ git commit -m \"Initial version of cool_code.py\"\n[main (root-commit) b40dc25] Initial version of cool_code.py\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 cool_code.py"
  },
  {
    "objectID": "01-ds-tools.html#the-commit-log",
    "href": "01-ds-tools.html#the-commit-log",
    "title": "2  Data Science Workflow",
    "section": "2.7 The Commit Log",
    "text": "2.7 The Commit Log\n\nView the commit log using git log:\n\nuser@hostname:~/cool-project$ git log\ncommit b40dc252a3b7355cc4c28397fefe7911ff3c94b9 (HEAD -&gt; main)\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:57:16 2023 +0000\n\n    Initial version of cool_code.py\n\n\n\n\n\ngitGraph\n   commit id: \"b40dc25\""
  },
  {
    "objectID": "01-ds-tools.html#making-changes",
    "href": "01-ds-tools.html#making-changes",
    "title": "2  Data Science Workflow",
    "section": "2.8 Making Changes",
    "text": "2.8 Making Changes\nuser@hostname:~/cool-project$ git status\nOn branch main\nnothing to commit, working tree clean\nuser@hostname:~/cool-project$ echo \"1 + 1\" &gt;&gt; cool_code.py\nuser@hostname:~/cool-project$ more cool_code.py\n1 + 1\nuser@hostname:~/cool-project$ git add cool_code.py\nuser@hostname:~/cool-project$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   cool_code.py\n\nuser@hostname:~/cool-project$ git commit -m \"Added code to cool_code.py\"\n[main e3bc497] Added code to cool_code.py\n 1 file changed, 1 insertion(+)"
  },
  {
    "objectID": "01-ds-tools.html#section",
    "href": "01-ds-tools.html#section",
    "title": "2  Data Science Workflow",
    "section": "2.9 ",
    "text": "2.9 \nThe git log will show the new version:\nuser@hostname:~/cool-project$ git log\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224 (HEAD -&gt; main)\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12e\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial version of cool_code.py"
  },
  {
    "objectID": "01-ds-tools.html#more-changes",
    "href": "01-ds-tools.html#more-changes",
    "title": "2  Data Science Workflow",
    "section": "2.10 More Changes",
    "text": "2.10 More Changes\nuser@hostname:~/cool-project$ echo \"2 + 2\" &gt;&gt; cool_code.py\nuser@hostname:~/cool-project$ more cool_code.py\n1 + 1\n2 + 2\nuser@hostname:~/cool-project$ git add cool_code.py\nuser@hostname:~/cool-project$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   cool_code.py\n\nuser@hostname:~/cool-project$ git commit -m \"Second version of cool_code.py\"\n[main 4007db9] Second version of cool_code.py\n 1 file changed, 1 insertion(+)"
  },
  {
    "objectID": "01-ds-tools.html#and-the-git-log",
    "href": "01-ds-tools.html#and-the-git-log",
    "title": "2  Data Science Workflow",
    "section": "2.11 And the git log",
    "text": "2.11 And the git log\nuser@hostname:~/cool-project$ git log\ncommit 4007db9a031ca134fe09eab840b2bc845366a9c1 (HEAD -&gt; main)\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:39:28 2023 +0000\n\n    Second version of cool_code.py\n\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12e\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial (empty) version of cool_code.py"
  },
  {
    "objectID": "01-ds-tools.html#undoing-a-commit-i",
    "href": "01-ds-tools.html#undoing-a-commit-i",
    "title": "2  Data Science Workflow",
    "section": "2.12 Undoing a Commit I",
    "text": "2.12 Undoing a Commit I\nFirst check the git log to find the hash for the commit you want to revert back to:\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py"
  },
  {
    "objectID": "01-ds-tools.html#undoing-a-commit-ii",
    "href": "01-ds-tools.html#undoing-a-commit-ii",
    "title": "2  Data Science Workflow",
    "section": "2.13 Undoing a Commit II",
    "text": "2.13 Undoing a Commit II\n\n This is irreversable! \n\nuser@hostname:~/cool-project$ git reset --hard e3bc497ac\nHEAD is now at e3bc497 Added code to cool_code.py\nuser@hostname:~/cool-project$ git log\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224 (HEAD -&gt; main)\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12e\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial (empty) version of cool_code.py"
  },
  {
    "objectID": "01-ds-tools.html#onwards-and-upwards",
    "href": "01-ds-tools.html#onwards-and-upwards",
    "title": "2  Data Science Workflow",
    "section": "2.14 Onwards and Upwards",
    "text": "2.14 Onwards and Upwards\nuser@hostname:~/cool-project$ echo \"3 + 3\" &gt;&gt; cool_code.py\nuser@hostname:~/cool-project$ git add cool_code.py\nuser@hostname:~/cool-project$ git status\nOn branch main\nChanges to be committed:\n  (use \"git restore --staged &lt;file&gt;...\" to unstage)\n        modified:   cool_code.py\n\nuser@hostname:~/cool-project$ git commit -m \"Added different code to cool_code.py\"\n[main 700d955] Added different code to cool_code.py\n 1 file changed, 1 insertion(+)"
  },
  {
    "objectID": "01-ds-tools.html#section-1",
    "href": "01-ds-tools.html#section-1",
    "title": "2  Data Science Workflow",
    "section": "2.15 ",
    "text": "2.15 \nThe final git log:\nuser@hostname:~/cool-project$ git log\ncommit 700d955faacb27d7b8bc464b9451851b5e319f20 (HEAD -&gt; main)\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:44:49 2023 +0000\n\n    Added different code to cool_code.py\n\ncommit e3bc497acbb5a487566ff2014dcd7b83d0c75224\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:38:05 2023 +0000\n\n    Added code to cool_code.py\n\ncommit b40dc25b14c0426b06c8d182184e147853f3c12e\nAuthor: Jeff Jacobs &lt;jjacobs3@cs.stanford.edu&gt;\nDate:   Sun May 28 00:37:02 2023 +0000\n\n    Initial (empty) version of cool_code.py"
  },
  {
    "objectID": "01-ds-tools.html#but-why-these-diagrams",
    "href": "01-ds-tools.html#but-why-these-diagrams",
    "title": "2  Data Science Workflow",
    "section": "2.16 But Why These Diagrams?",
    "text": "2.16 But Why These Diagrams?\nEven the simplest projects can start to look like:\n\n\n\n\n\ngitGraph\n       commit id: \"537dd67\"\n       commit id: \"6639143\"\n       branch nice_feature\n       checkout nice_feature\n       commit id: \"937ded8\"\n       checkout main\n       commit id: \"9e6679c\"\n       checkout nice_feature\n       branch very_nice_feature\n       checkout very_nice_feature\n       commit id: \"7f4de03\"\n       checkout main\n       commit id: \"6df80c1\"\n       checkout nice_feature\n       commit id: \"bd0ebb8\"\n       checkout main\n       merge nice_feature id: \"9ff61cc\" tag: \"V 1.0.0\" type: HIGHLIGHT\n       checkout very_nice_feature\n       commit id: \"370613b\"\n       checkout main\n       commit id: \"9a07a97\""
  },
  {
    "objectID": "01-ds-tools.html#the-github-side-remote",
    "href": "01-ds-tools.html#the-github-side-remote",
    "title": "2  Data Science Workflow",
    "section": "2.17 The GitHub Side: Remote",
    "text": "2.17 The GitHub Side: Remote"
  },
  {
    "objectID": "01-ds-tools.html#an-empty-repo",
    "href": "01-ds-tools.html#an-empty-repo",
    "title": "2  Data Science Workflow",
    "section": "2.18 An Empty Repo",
    "text": "2.18 An Empty Repo"
  },
  {
    "objectID": "01-ds-tools.html#refresh-after-git-push",
    "href": "01-ds-tools.html#refresh-after-git-push",
    "title": "2  Data Science Workflow",
    "section": "2.19 Refresh after git push",
    "text": "2.19 Refresh after git push"
  },
  {
    "objectID": "01-ds-tools.html#commit-history",
    "href": "01-ds-tools.html#commit-history",
    "title": "2  Data Science Workflow",
    "section": "2.20 Commit History",
    "text": "2.20 Commit History"
  },
  {
    "objectID": "01-ds-tools.html#checking-the-diff",
    "href": "01-ds-tools.html#checking-the-diff",
    "title": "2  Data Science Workflow",
    "section": "2.21 Checking the diff",
    "text": "2.21 Checking the diff"
  },
  {
    "objectID": "01-ds-tools.html#web-development",
    "href": "01-ds-tools.html#web-development",
    "title": "2  Data Science Workflow",
    "section": "2.22 Web Development",
    "text": "2.22 Web Development\n\n\n\n\n\n\n\n\n\nFrontend   \nBackend   \n\n\n\n\nLow Level\nHTML/CSS/JavaScript\nGitHub Pages\n\n\nMiddle Level\nJS Libraries\nPHP, SQL\n\n\nHigh Level\nReact, Next.js\nNode.js, Vercel\n\n\n\n\nFrontend icons: UI+UI elements, what the user sees (on the screen), user experience (UX), data visualization Backend icons: Databases, Security"
  },
  {
    "objectID": "01-ds-tools.html#getting-content-onto-the-internet",
    "href": "01-ds-tools.html#getting-content-onto-the-internet",
    "title": "2  Data Science Workflow",
    "section": "2.23 Getting Content onto the Internet",
    "text": "2.23 Getting Content onto the Internet\n\n\n\n\nStep 1: index.html\n\n\nStep 2: Create GitHub repository\n\n\nStep 3: git init, git add -A ., git push\n\n\nStep 4: Enable GitHub Pages in repo settings\n\n\nStep 5: &lt;username&gt;.github.io!"
  },
  {
    "objectID": "01-ds-tools.html#deploying-from-a-branchfolder",
    "href": "01-ds-tools.html#deploying-from-a-branchfolder",
    "title": "2  Data Science Workflow",
    "section": "2.24 Deploying from a Branch/Folder",
    "text": "2.24 Deploying from a Branch/Folder"
  },
  {
    "objectID": "01-ds-tools.html#r-vs.-rstudio-vs.-quarto",
    "href": "01-ds-tools.html#r-vs.-rstudio-vs.-quarto",
    "title": "2  Data Science Workflow",
    "section": "2.25 R vs. RStudio vs. Quarto",
    "text": "2.25 R vs. RStudio vs. Quarto\n\n\n\n\n\n\n\n\n\n\n\n\n\nGUI wrapper around R (Integrated Development Environment = IDE)\nRun blocks of R code (.qmd chunks)\n\n\n\nThe R Language \n\nProgramming language\nRuns scripts via Rscript &lt;script&gt;.r \n\n\n\n\n\n\n+\n\n\n\n\n\n\n\nGUI wrapper around Python (IDE)\nRun blocks of Python code (.ipynb cells)\n\n\n\n\nThe Python Language \n\nScripting language\nOn its own, just runs scripts via python &lt;script&gt;.py"
  },
  {
    "objectID": "01-ds-tools.html#getting-r-onto-your-computer",
    "href": "01-ds-tools.html#getting-r-onto-your-computer",
    "title": "2  Data Science Workflow",
    "section": "2.26 Getting R Onto Your Computer",
    "text": "2.26 Getting R Onto Your Computer\n\nDownload the R language: https://cran.r-project.org/\n\n\n\nVSCode (recommended)\n\nLinux | Windows | OSX\nInstall the Quarto Extension for VSCode (more info from Quarto here)\n\n\nRStudio\n\nRStudio Desktop"
  },
  {
    "objectID": "01-ds-tools.html#python",
    "href": "01-ds-tools.html#python",
    "title": "2  Data Science Workflow",
    "section": "2.27 Python",
    "text": "2.27 Python\n\nThe Python interpreter: Linux | Windows | OSX\nWith VSCode (recommended): you can start coding!\n\n\nmy_python_code.qmd\n\n```{python}\n1 + 1\n```\n\nWith Jupyter there are two options:\n\nJupyterLab (recommended) vs. Jupyter\nMain difference (imo): JupyterLab has a tabbed interface"
  },
  {
    "objectID": "01-ds-tools.html#google-colab",
    "href": "01-ds-tools.html#google-colab",
    "title": "2  Data Science Workflow",
    "section": "2.28 Google Colab",
    "text": "2.28 Google Colab\nAlternative when all else fails! https://colab.research.google.com/\n\nFully web-based Jupyter editing/execution (import/export .ipynb files)\nCan persist code/data to Google Drive\nDrawback: RAM limitations, have to activate GPU mode (pretty much required for any AI work), idle time limitation"
  },
  {
    "objectID": "01-ds-tools.html#colab-runtime-options",
    "href": "01-ds-tools.html#colab-runtime-options",
    "title": "2  Data Science Workflow",
    "section": "2.29 Colab Runtime Options",
    "text": "2.29 Colab Runtime Options"
  },
  {
    "objectID": "01-ds-tools.html#next-week",
    "href": "01-ds-tools.html#next-week",
    "title": "2  Data Science Workflow",
    "section": "2.30 Next Week",
    "text": "2.30 Next Week\nData Gathering and APIs"
  },
  {
    "objectID": "02-data-gathering.html#what-well-cover-today",
    "href": "02-data-gathering.html#what-well-cover-today",
    "title": "3  Data Gathering and APIs",
    "section": "3.1 What We’ll Cover Today",
    "text": "3.1 What We’ll Cover Today"
  },
  {
    "objectID": "02-data-gathering.html#data-gathering",
    "href": "02-data-gathering.html#data-gathering",
    "title": "3  Data Gathering and APIs",
    "section": "3.2 Data Gathering",
    "text": "3.2 Data Gathering\n\nPreexisting data sources\nWeb scraping\nConverting between formats"
  },
  {
    "objectID": "02-data-gathering.html#preexisting-data-sources",
    "href": "02-data-gathering.html#preexisting-data-sources",
    "title": "3  Data Gathering and APIs",
    "section": "3.3 Preexisting Data Sources",
    "text": "3.3 Preexisting Data Sources\n\nDepending on your field, or the type of data you’re looking for, there may be a “standard” data source!\ne.g., in Economics, for US data, FRED"
  },
  {
    "objectID": "02-data-gathering.html#web-scraping",
    "href": "02-data-gathering.html#web-scraping",
    "title": "3  Data Gathering and APIs",
    "section": "3.4 Web Scraping",
    "text": "3.4 Web Scraping\n\nFun fact: you can view a webpage’s HTML source code by right-clicking on the page and selecting “View Source”\n\nOn older websites, this means we can just request https://www.page.com and parse the returned HTML\n\nLess fun fact: modern web frameworks like React or Next.js generate pages dynamically using JS, meaning that what you see on the page will not be visible in the HTML source\n\nData scraping still possible for these websites, however, using browser automation tools like Selenium"
  },
  {
    "objectID": "02-data-gathering.html#scraping-difficulty",
    "href": "02-data-gathering.html#scraping-difficulty",
    "title": "3  Data Gathering and APIs",
    "section": "3.5 Scraping Difficulty",
    "text": "3.5 Scraping Difficulty\n\n\n\n\n\n\n\n\n\nHow is data loaded?\nSolution\n\n\n\n\nEasy\nData in HTML source\n“View Source”\n\n\nMedium\nData loaded dynamically via API\n“View Source”, find API call, request programmatically\n\n\nHard\nData loaded dynamically via web framework\nUse Selenium"
  },
  {
    "objectID": "02-data-gathering.html#data-formats",
    "href": "02-data-gathering.html#data-formats",
    "title": "3  Data Gathering and APIs",
    "section": "3.6 Data Formats",
    "text": "3.6 Data Formats\n\nThe most common formats, for most fields1:\n\n.csv: Comma-Separated Values\n.tsv: Tab-Separated Values\n.json: JavaScript Object Notation\n.xls/.xlsx: Excel format\n.dta: Stata format"
  },
  {
    "objectID": "02-data-gathering.html#csv-.tsv",
    "href": "02-data-gathering.html#csv-.tsv",
    "title": "3  Data Gathering and APIs",
    "section": "3.7 .csv / .tsv",
    "text": "3.7 .csv / .tsv\n\n\n👍\n\n\nmydata.csv\n\nindex,var_1,var_2,var_3\nA,val_A1,val_A2,val_A3\nB,val_B1,val_B2,val_B3\nC,val_C1,val_C2,val_C3\nD,val_D1,val_D2,val_D3\n\n\n👎\n\n\nmydata.tsv\n\nindex var_1 var_2 var_3\nA val_A1  val_A2  val_A3\nB val_B1  val_B2  val_B3\nC val_C1  val_C2  val_C3\nD val_D1  val_D2  val_D3\n\n\n\n→\n\n\n\n\nCode\nlibrary(readr)\ndata &lt;- read_csv(\"./assets/data/ch02/mydata.csv\")\n\n\nRows: 3 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): index, var_1, var_2, var_3\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\ndata\n\n\n# A tibble: 3 × 4\n  index var_1  var_2  var_3 \n  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; \n1 A     val_A1 val_A2 val_A3\n2 B     val_B1 val_B2 val_B3\n3 C     val_C1 val_C2 val_C3\n\n\nCode\n# | index | var_1 | var_2 | var_3 |\n# | - | - | - | - |\n# | A | val_A1 | val_A2 | val_A3 |\n# | B | val_B1 | val_B2 | val_B3 |\n# | C | val_C1 | val_C2 | val_C3 |\n# | D | val_D1 | val_D2 | val_D3 | \n\n\n\n\n\n\nPython: pd.read_csv() (from Pandas library)\nR: read_csv() (from readr library)"
  },
  {
    "objectID": "02-data-gathering.html#json",
    "href": "02-data-gathering.html#json",
    "title": "3  Data Gathering and APIs",
    "section": "3.8 .json",
    "text": "3.8 .json\n\n\n\ncourses.json\n\n{\n  \"dsan5000\": {\n    \"title\": \"Data Science and Analytics\",\n    \"credits\": 3,\n    \"lectures\": [\n      \"Intro\",\n      \"Tools and Workflow\"\n    ]\n  },\n  \"dsan5100\": {\n    \"title\": \"Probabilistic Modeling and Statistical Computing\",\n    \"credits\": 3,\n    \"lectures\": [\n      \"Intro\",\n      \"Conditional Probability\"\n    ]\n  }\n}\n\n\n\nPython: json (built-in library, import json)\nR: jsonlite (install.packages(jsonlite))\nHelpful validator (for when .json file won’t load)"
  },
  {
    "objectID": "02-data-gathering.html#other-formats",
    "href": "02-data-gathering.html#other-formats",
    "title": "3  Data Gathering and APIs",
    "section": "3.9 Other Formats",
    "text": "3.9 Other Formats\n\n.xls/.xlsx: Requires special libraries in Python/R\n\nPython: openpyxl\nR: readxl (part of tidyverse)\n\n.dta: Stata format, but can be read/written to in Python/R\n\nPython: Pandas has built-in pd.read_stata() and pd.to_stata()\nR: read_dta() from Haven library (part of tidyverse)"
  },
  {
    "objectID": "02-data-gathering.html#apis",
    "href": "02-data-gathering.html#apis",
    "title": "3  Data Gathering and APIs",
    "section": "3.10 APIs",
    "text": "3.10 APIs\n\nApplication Programming Interfaces: the “developer-facing” part of a data pipeline/service\nCan think of it like…\n\nan electrical outlet: you just want electricity from it, without knowing details of Alternating/Direct Currents\nwater fountain: you just want water from it, without knowing details of how it’s pumped into the fountain\ncar: you just want to accelerate, brake, and reverse, without knowing details of combustion engine"
  },
  {
    "objectID": "02-data-gathering.html#what-does-an-api-do",
    "href": "02-data-gathering.html#what-does-an-api-do",
    "title": "3  Data Gathering and APIs",
    "section": "3.11 What Does an API Do?",
    "text": "3.11 What Does an API Do?\n\nExposes endpoints for use by other developers, without requiring them to know the nuts and bolts of your pipeline/service\nIn our examples…\n\nElectrical outlet: endpoint is socket, wiring not exposed\nWater fountain: endpoint is aerator, pump not exposed\nCar: endpoint is pedals, steering wheel, etc… engine is not exposed\n\n\n\nWhen I’m teaching programming to students in refugee camps who may have never used a computer before, I try to use the idea of “robots”: a program is a robot trained to sit there and wait for inputs, then process them in some way and spit out some output. APIs really capture this notion, honestly."
  },
  {
    "objectID": "02-data-gathering.html#example-math-api",
    "href": "02-data-gathering.html#example-math-api",
    "title": "3  Data Gathering and APIs",
    "section": "3.12 Example: Math API",
    "text": "3.12 Example: Math API\n\nBase URL: https://newton.vercel.app/api/v2/\nThe endpoint: factor\nThe argument: \"x^2 - 1\"\nThe request: https://newton.vercel.app/api/v2/factor/x^2-1\n\n\n\nCode\nlibrary(httr2)\nrequest_obj &lt;- request(\"https://newton.vercel.app/api/v2/factor/x^2-1\")\nresponse_obj &lt;- req_perform(request_obj)\nwriteLines(response_obj %&gt;% resp_body_string())\n\n\n{\"operation\":\"factor\",\"expression\":\"x^2-1\",\"result\":\"(x - 1) (x + 1)\"}"
  },
  {
    "objectID": "02-data-gathering.html#math-api-endpoints",
    "href": "02-data-gathering.html#math-api-endpoints",
    "title": "3  Data Gathering and APIs",
    "section": "3.13 Math API Endpoints",
    "text": "3.13 Math API Endpoints\n\n\n\nOperation\nAPI Endpoint\nResult\n\n\n\n\nSimplify\n/simplify/2^2+2(2)\n8\n\n\nFactor\n/factor/x^2 + 2x\nx (x + 2)\n\n\nDerive\n/derive/x^2+2x\n2 x + 2\n\n\nIntegrate\n/integrate/x^2+2x\n1/3 x^3 + x^2 + C\n\n\nFind 0’s\n/zeroes/x^2+2x\n[-2, 0]\n\n\nFind Tangent\n/tangent/2|x^3\n12 x + -16\n\n\nArea Under Curve\n/area/2:4|x^3\n60\n\n\nCosine\n/cos/pi\n-1\n\n\nSine\n/sin/0\n0\n\n\nTangent\n/tan/0\n0"
  },
  {
    "objectID": "02-data-gathering.html#scraping-html-with-httr2-and-xml2",
    "href": "02-data-gathering.html#scraping-html-with-httr2-and-xml2",
    "title": "3  Data Gathering and APIs",
    "section": "3.14 Scraping HTML with httr2 and xml2",
    "text": "3.14 Scraping HTML with httr2 and xml2\nhttr2 Documentation | xml2 Documentation\n\n\nCode\n# Get HTML\nlibrary(httr2)\nrequest_obj &lt;- request(\"https://en.wikipedia.org/wiki/Data_science\")\nresponse_obj &lt;- req_perform(request_obj)\n# Parse HTML\nlibrary(xml2)\n\n\n\nAttaching package: 'xml2'\n\n\nThe following object is masked from 'package:httr2':\n\n    url_parse\n\n\nCode\nhtml_obj &lt;- response_obj %&gt;% resp_body_html()\nhtml_obj %&gt;% xml_find_all('//h2//span[@class=\"mw-headline\"]')\n\n\n{xml_nodeset (5)}\n[1] &lt;span class=\"mw-headline\" id=\"Foundations\"&gt;Foundations&lt;/span&gt;\n[2] &lt;span class=\"mw-headline\" id=\"Etymology\"&gt;Etymology&lt;/span&gt;\n[3] &lt;span class=\"mw-headline\" id=\"Data_Science_And_Data_Analysis\"&gt;Data Scienc ...\n[4] &lt;span class=\"mw-headline\" id=\"See_also\"&gt;See also&lt;/span&gt;\n[5] &lt;span class=\"mw-headline\" id=\"References\"&gt;References&lt;/span&gt;\n\n\n\n\nNote: httr2 is a re-written version of the original httr package, which is now deprecated. You’ll still see lots of code using httr, however, so it’s good to know how both versions work. Click here for a helpful vignette on the original httr library."
  },
  {
    "objectID": "02-data-gathering.html#navigating-html-with-xpath",
    "href": "02-data-gathering.html#navigating-html-with-xpath",
    "title": "3  Data Gathering and APIs",
    "section": "3.15 Navigating HTML with XPath",
    "text": "3.15 Navigating HTML with XPath\nXPath Cheatsheet\n\nNotice the last line on the previous slide:\n\nhtml_obj %&gt;% xml_find_all('//h2//span[@class=\"mw-headline\"]')\n\nThe string passed to xml_find_all() is an XPath selector\n\n\n\nXPath selectors are used by many different libraries, including Selenium (which we’ll look at very soon) and jQuery (a standard extension to plain JavaScript allowing easy searching/manipulation of the DOM), so it’s good to learn it now!"
  },
  {
    "objectID": "02-data-gathering.html#xpath-i-selecting-elements",
    "href": "02-data-gathering.html#xpath-i-selecting-elements",
    "title": "3  Data Gathering and APIs",
    "section": "3.16 XPath I: Selecting Elements",
    "text": "3.16 XPath I: Selecting Elements\n\n\nmypage.html\n\n&lt;div class=\"container\"&gt;\n  &lt;h1&gt;Header&lt;/h1&gt;\n  &lt;p id=\"page-content\"&gt;Content&lt;/p&gt;\n  &lt;img class=\"footer-image m-5\" src=\"footer.png\"&gt;\n&lt;/div&gt;\n\n\n'//div' matches all elements &lt;div&gt; in the document:\n&lt;div class=\"container\"&gt;\n  &lt;h1&gt;Header&lt;/h1&gt;\n  &lt;p id=\"page-content\"&gt;Content&lt;/p&gt;\n  &lt;img class=\"footer-image m-5\" src=\"footer.png\"&gt;\n&lt;/div&gt;\n'//div//img' matches &lt;img&gt; elements which are children of &lt;div&gt; elements:\n&lt;img class=\"footer-image m-5\" src=\"footer.png\"&gt;"
  },
  {
    "objectID": "02-data-gathering.html#xpath-ii-filtering-by-attributes",
    "href": "02-data-gathering.html#xpath-ii-filtering-by-attributes",
    "title": "3  Data Gathering and APIs",
    "section": "3.17 XPath II: Filtering by Attributes",
    "text": "3.17 XPath II: Filtering by Attributes\n\n\nmypage.html\n\n&lt;div class=\"container\"&gt;\n  &lt;h1&gt;Header&lt;/h1&gt;\n  &lt;p id=\"page-content\"&gt;Content&lt;/p&gt;\n  &lt;img class=\"footer-image m-5\" src=\"footer.png\"&gt;\n&lt;/div&gt;\n\n\n'//p[id=\"page-content\"]' matches all &lt;p&gt; elements with id page-content2:\n&lt;p id=\"page-content\"&gt;Content&lt;/p&gt;\nMatching classes is a bit trickier:\n'//img[contains(concat(\" \", normalize-space(@class), \" \"), \" footer-image \")]'\nmatches all &lt;img&gt; elements with page-content as one of their classes3\n&lt;img class=\"footer-image m-5\" src=\"footer.png\"&gt;"
  },
  {
    "objectID": "02-data-gathering.html#authentication",
    "href": "02-data-gathering.html#authentication",
    "title": "3  Data Gathering and APIs",
    "section": "3.18 Authentication",
    "text": "3.18 Authentication\n\nMost APIs don’t allow requests to be made by anonymous requesters, and require authentication.\nFor example, to access private GitHub repos using GitHub’s API, you’ll need to authenticate that you are in fact the one making the request"
  },
  {
    "objectID": "02-data-gathering.html#authentication-via-gh",
    "href": "02-data-gathering.html#authentication-via-gh",
    "title": "3  Data Gathering and APIs",
    "section": "3.19 Authentication via GH",
    "text": "3.19 Authentication via GH\n\nThe GH library for R can handle this authentication process for you. For example, this private repo in my account does not show up if requested anonymously, but does show up when requested using GH with a Personal Access Token4:\n\n\n\nCode\nlibrary(gh)\n# We use tryCatch so that code still runs even if (a) GITHUB_TOKEN isn't set, or (b) no internet connection\nsuccess &lt;- FALSE\nresult &lt;- tryCatch( \n  {\n    gh(\"GET /repos/jpowerj/private-repo-test\")\n    success &lt;- TRUE\n  },\n  error = function(e) {\n    success &lt;- FALSE\n    writeLines(\"Could not fetch github repo\")\n  }\n)\n\n\nCould not fetch github repo\n\n\nCode\nif (success) {\n    writeLines(paste0(result$name, \": \",result$description))\n}"
  },
  {
    "objectID": "02-data-gathering.html#next-week",
    "href": "02-data-gathering.html#next-week",
    "title": "3  Data Gathering and APIs",
    "section": "3.20 Next Week",
    "text": "3.20 Next Week\n\nData Cleaning\nTidy Data"
  },
  {
    "objectID": "02-data-gathering.html#footnotes",
    "href": "02-data-gathering.html#footnotes",
    "title": "3  Data Gathering and APIs",
    "section": "",
    "text": "This is considering only cases where the data comes in the form of individual files. There are also database formats like SQL and MongoDB (which we’ll learn about later on) where data is spread over many files and obtained via database queries.↩︎\nIn HTML, ids are required to be unique to particular elements (and elements cannot have more than one id), meaning that this should only return a single element, for valid HTML code (not followed by all webpages!). Also note the double-quotes after id=, which are required in XPath.↩︎\nYour intuition may be to just use '//img[@class=\"footer-image\"]'. Sadly, however, this will match only elements with footer-image as their only class. i.e., it will match &lt;img class=\"footer-image\"&gt; but not &lt;img class=\"footer-image another-class\"&gt;. This will usually fail, since most elements on modern webpages have several classes. For example, if the site is using Bootstrap, &lt;p class=\"p-5 m-3\"&gt;&lt;/p&gt; creates a paragraph element with a padding of 5 pixels and a margin of 3 pixels.↩︎\nYour code should never contain authentication info, especially when using GitHub. In this case, I created an OS environment variable called GITHUB_TOKEN containing my Personal Access Token, which GH then uses to make authenticated requests.↩︎"
  }
]