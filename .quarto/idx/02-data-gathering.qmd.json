{"title":"Data Gathering and APIs","markdown":{"yaml":{"title":"Data Gathering and APIs","subtitle":"*DSAN 5000: Data Science and Analytics*","date":"last-modified","institute":"<a href=\"mailto:jj1088@georgetown.edu\">`jj1088@georgetown.edu`</a>","author":"Jeff Jacobs","categories":["Lecture Slides"],"format":{"revealjs":{"cache":false}},"metadata-files":["./_bookdown.globals.yml"]},"headingText":"What We'll Cover Today","containsRefs":false,"markdown":"\n\n\n<ul class=\"menu\"></ul>\n\n::: {.hidden}\n```{r,echo=FALSE}\nset.seed(1948)\nknitr::opts_template$set(\n    tikz_settings = list(fig.ext = \"svg\", fig.align = \"center\", engine.opts = list(dvisvgm.opts = \"--font-format=woff\"))\n  )\n```\n:::\n\n## Data Gathering {data-name=\"Data Gathering\"}\n\n* Preexisting data sources\n* Web scraping\n* Converting between formats\n\n## Preexisting Data Sources\n\n* Depending on your field, or the type of data you're looking for, there may be a \"standard\" data source!\n* e.g., in *Economics*, for US data, FRED\n\n## Web Scraping\n\n* Fun fact: you can view a webpage's **HTML source code** by right-clicking on the page and selecting \"View Source\"\n  * On older websites, this means we can just request `https://www.page.com` and parse the returned HTML\n* Less fun fact: modern web frameworks like **React** or **Next.js** generate pages dynamically using JS, meaning that what you see on the page will not be visible in the HTML source\n  * Data scraping still possible for these websites, however, using browser automation tools like <a href=\"https://www.selenium.dev/\" target=\"_blank\">**Selenium**</a>\n\n## Scraping Difficulty\n\n| | How is data loaded? | Solution |\n|-|-|-|\n| **Easy** | Data in HTML source | \"View Source\" |\n| **Medium** | Data loaded dynamically via API | \"View Source\", find API call, request programmatically |\n| **Hard** | Data loaded dynamically via web framework | Use <a href=\"https://www.selenium.dev/\" target=\"_blank\">Selenium</a> |\n\n## Data Formats\n\n* The most common formats, for most fields[^dbs]:\n  * `.csv`: Comma-Separated Values\n  * `.tsv`: Tab-Separated Values\n  * `.json`: JavaScript Object Notation\n  * `.xls`/`.xlsx`: Excel format\n  * `.dta`: Stata format\n\n[^dbs]: This is considering only cases where the data comes in the form of individual **files**. There are also **database** formats like SQL and MongoDB (which we'll learn about later on) where data is spread over many files and obtained via database **queries**.\n\n## `.csv` / `.tsv`\n\n::: columns\n::: {.column width=\"47%\"}\n\nüëç\n\n```csv {filename=\"mydata.csv\"}\nindex,var_1,var_2,var_3\nA,val_A1,val_A2,val_A3\nB,val_B1,val_B2,val_B3\nC,val_C1,val_C2,val_C3\nD,val_D1,val_D2,val_D3\n```\n\n::: {.small-codeblock}\n\nüëé\n\n```csv {filename=\"mydata.tsv\"}\nindex var_1 var_2 var_3\nA val_A1  val_A2  val_A3\nB val_B1  val_B2  val_B3\nC val_C1  val_C2  val_C3\nD val_D1  val_D2  val_D3\n```\n\n:::\n\n:::\n::: {.column width=\"6%\"}\n&rarr;\n:::\n\n::: {.column width=\"47%\"}\n\n::: {.fw-table .small-table .r-stretch}\n\n```{r}\n#| label: sample-csv\nlibrary(readr)\ndata <- read_csv(\"./assets/data/ch02/mydata.csv\")\ndata\n# | index | var_1 | var_2 | var_3 |\n# | - | - | - | - |\n# | A | val_A1 | val_A2 | val_A3 |\n# | B | val_B1 | val_B2 | val_B3 |\n# | C | val_C1 | val_C2 | val_C3 |\n# | D | val_D1 | val_D2 | val_D3 | \n```\n\n:::\n\n:::\n:::\n\n* Python: `pd.read_csv()` (from Pandas library)\n* R: `read_csv()` (from `readr` library)\n\n## `.json`\n\n::: {.smallish-codeblock}\n\n```json {filename=\"courses.json\"}\n{\n  \"dsan5000\": {\n    \"title\": \"Data Science and Analytics\",\n    \"credits\": 3,\n    \"lectures\": [\n      \"Intro\",\n      \"Tools and Workflow\"\n    ]\n  },\n  \"dsan5100\": {\n    \"title\": \"Probabilistic Modeling and Statistical Computing\",\n    \"credits\": 3,\n    \"lectures\": [\n      \"Intro\",\n      \"Conditional Probability\"\n    ]\n  }\n}\n```\n:::\n\n* Python: <a href=\"https://docs.python.org/3/library/json.html\" target=\"_blank\">`json`</a> (built-in library</a>, `import json`)\n* R: <a href=\"https://cran.r-project.org/web/packages/jsonlite/index.html\" target=\"_blank\">`jsonlite`</a> (`install.packages(jsonlite)`)\n* <a href=\"https://jsonlint.com/\" target=\"_blank\">Helpful validator</a> (for when `.json` file won't load)\n\n## Other Formats\n\n* `.xls`/`.xlsx`: Requires special libraries in Python/R\n  * Python: <a href=\"https://openpyxl.readthedocs.io\" target=\"_blank\">`openpyxl`</a>\n  * R: <a href=\"https://readxl.tidyverse.org/\" target=\"_blank\">`readxl`</a> (part of tidyverse)\n* `.dta`: Stata format, but can be read/written to in Python/R\n  * Python: Pandas has built-in `pd.read_stata()` and `pd.to_stata()`\n  * R: `read_dta()` from <a href=\"https://haven.tidyverse.org/reference/read_dta.html\" target=\"_blank\">Haven</a> library (part of tidyverse)\n\n## APIs {data-name=\"APIs\"}\n\n* **A**pplication **P**rogramming **I**nterfaces: the \"developer-facing\" part of a data pipeline/service\n* Can think of it like...\n  * an electrical outlet: you just want **electricity** from it, without knowing details of Alternating/Direct Currents\n  * water fountain: you just want **water** from it, without knowing details of how it's pumped into the fountain\n  * car: you just want to accelerate, brake, and reverse, without knowing details of combustion engine\n\n## What Does an API Do?\n\n* Exposes **endpoints** for use by other developers, without requiring them to know the nuts and bolts of your pipeline/service\n* In our examples...\n  * Electrical outlet: endpoint is **socket**, wiring not exposed\n  * Water fountain: endpoint is **aerator**, pump not exposed\n  * Car: endpoint is **pedals**, **steering wheel**, etc... engine is not exposed\n\n::: {.notes}\n\nWhen I'm teaching programming to students in refugee camps who may have never used a computer before, I try to use the idea of \"robots\": a program is a robot trained to sit there and wait for inputs, then process them in some way and spit out some output. APIs really capture this notion, honestly.\n\n:::\n\n## Example: Math API\n\n* Base URL: <a href=\"https://newton.vercel.app/api/v2/\" target=\"_blank\">`https://newton.vercel.app/api/v2/`</a>\n* The **endpoint**: `factor`\n* The **argument**: `\"x^2 - 1\"`\n* The **request**: <a href=\"https://newton.vercel.app/api/v2/factor/x^2-1\" target=\"_blank\">`https://newton.vercel.app/api/v2/factor/x^2-1`</a>\n```{r}\n#| label: math-api-call\n#| echo: true\n#| code-fold: show\nlibrary(httr2)\nrequest_obj <- request(\"https://newton.vercel.app/api/v2/factor/x^2-1\")\nresponse_obj <- req_perform(request_obj)\nwriteLines(response_obj %>% resp_body_string())\n```\n\n## Math API Endpoints {.smaller}\n\n| Operation | API Endpoint | Result |\n| - | - | - |\n| Simplify | `/simplify/2^2+2(2)` | `8` |\n| Factor | `/factor/x^2 + 2x` | `x (x + 2)` |\n| Derive | `/derive/x^2+2x` | `2 x + 2` |\n| Integrate | `/integrate/x^2+2x` | `1/3 x^3 + x^2 + C` |\n| Find 0's | `/zeroes/x^2+2x` | `[-2, 0]` |\n| Find Tangent | `/tangent/2|x^3` | `12 x + -16` |\n| Area Under Curve | `/area/2:4|x^3` | `60` |\n| Cosine | `/cos/pi` | `-1` |\n| Sine | `/sin/0` | `0` |\n| Tangent | `/tan/0` | `0` |\n\n<!-- | Inverse Cosine | `/arccos/1` | `0` |\nInverse Sine \t/arcsin/0 \t0\nInverse Tangent \t/arctan/0 \t0\nAbsolute Value \t/abs/-1 \t1\nLogarithm \t/log/2l8 \t3 -->\n\n## Scraping HTML with `httr2` and `xml2`\n\n<a href=\"https://httr2.r-lib.org/\" target=\"_blank\">`httr2` Documentation</a> | <a href=\"https://xml2.r-lib.org/\" target=\"_blank\">`xml2` Documentation</a>\n\n```{r}\n#| label: httr2-example\n#| echo: true\n#| code-fold: show\n# Get HTML\nlibrary(httr2)\nrequest_obj <- request(\"https://en.wikipedia.org/wiki/Data_science\")\nresponse_obj <- req_perform(request_obj)\n# Parse HTML\nlibrary(xml2)\nhtml_obj <- response_obj %>% resp_body_html()\nhtml_obj %>% xml_find_all('//h2//span[@class=\"mw-headline\"]')\n```\n\n::: {.aside}\n\nNote: `httr2` is a re-written version of the original `httr` package, which is now deprecated. You'll still see lots of code using `httr`, however, so it's good to know how both versions work. <a href=\"https://cran.r-project.org/web/packages/httr/vignettes/quickstart.html\" target=\"_blank\">Click here for a helpful vignette</a> on the original `httr` library.\n\n:::\n\n## Navigating HTML with XPath\n\n<a href=\"https://devhints.io/xpath\" target=\"_blank\">XPath Cheatsheet</a>\n\n* Notice the last line on the previous slide:\n\n```r\nhtml_obj %>% xml_find_all('//h2//span[@class=\"mw-headline\"]')\n```\n\n* The string passed to `xml_find_all()` is an **XPath selector**\n\n::: {.aside}\n\nXPath selectors are used by many different libraries, including **Selenium** (which we'll look at very soon) and **jQuery** (a standard extension to plain JavaScript allowing easy searching/manipulation of the DOM), so it's good to learn it now!\n\n:::\n\n## XPath I: Selecting Elements\n\n```html {filename=\"mypage.html\"}\n<div class=\"container\">\n  <h1>Header</h1>\n  <p id=\"page-content\">Content</p>\n  <img class=\"footer-image m-5\" src=\"footer.png\">\n</div>\n```\n\n* `'//div'` matches all elements `<div>` in the document:\n\n    ```html\n    <div class=\"container\">\n      <h1>Header</h1>\n      <p id=\"page-content\">Content</p>\n      <img class=\"footer-image m-5\" src=\"footer.png\">\n    </div>\n    ```\n* `'//div//img'` matches `<img>` elements which are **children of** `<div>` elements:\n\n    ```html\n    <img class=\"footer-image m-5\" src=\"footer.png\">\n    ```\n\n## XPath II: Filtering by Attributes {.smaller}\n\n\n\n```html {filename=\"mypage.html\"}\n<div class=\"container\">\n  <h1>Header</h1>\n  <p id=\"page-content\">Content</p>\n  <img class=\"footer-image m-5\" src=\"footer.png\">\n</div>\n```\n\n* `'//p[id=\"page-content\"]'` matches all `<p>` elements with id `page-content`[^unique-id]:\n\n    ```html\n    <p id=\"page-content\">Content</p>\n    ```\n* Matching **classes** is a bit trickier:\n\n    [`'//img[contains(concat(\" \", normalize-space(@class), \" \"), \" footer-image \")]'`]{.small-codeblock}\n\n    matches all `<img>` elements with `page-content` as one of their classes[^multi-class]\n\n    ```html\n    <img class=\"footer-image m-5\" src=\"footer.png\">\n    ```\n\n[^unique-id]: In HTML, `id`s are required to be **unique** to particular elements (and elements cannot have more than one `id`), meaning that this should only return a **single** element, for valid HTML code (not followed by all webpages!). Also note the **double-quotes** after `id=`, which are required in XPath.\n\n[^multi-class]: Your intuition may be to just use `'//img[@class=\"footer-image\"]'`. Sadly, however, this will match only elements with `footer-image` as their **only** class. i.e., it will match `<img class=\"footer-image\">` but not `<img class=\"footer-image another-class\">`. This will usually fail, since most elements on modern webpages have several classes. For example, if the site is using <a href=\"https://getbootstrap.com/docs/5.3/getting-started/introduction/\" target=\"_blank\">Bootstrap</a>, `<p class=\"p-5 m-3\"></p>` creates a paragraph element with a padding of 5 pixels and a margin of 3 pixels.\n\n## Authentication\n\n* Most APIs don't allow requests to be made by anonymous requesters, and require **authentication**.\n* For example, to access private GitHub repos using GitHub's API, you'll need to authenticate that you are in fact the one making the request\n\n## Authentication via `GH`\n\n* The `GH` library for `R` can handle this authentication process for you. For example, <a href=\"https://github.com/jpowerj/private-repo-test/\" target=\"_blank\">this private repo</a> in my account does not show up if requested anonymously, but does show up when requested using `GH` with a Personal Access Token[^security]:\n\n```{r}\n#| label: gh-authenticate\n#| echo: true\n#| code-fold: show\nlibrary(gh)\n# We use tryCatch so that code still runs even if (a) GITHUB_TOKEN isn't set, or (b) no internet connection\nsuccess <- FALSE\nresult <- tryCatch( \n  {\n    gh(\"GET /repos/jpowerj/private-repo-test\")\n    success <- TRUE\n  },\n  error = function(e) {\n    success <- FALSE\n    writeLines(\"Could not fetch github repo\")\n  }\n)\nif (success) {\n    writeLines(paste0(result$name, \": \",result$description))\n}\n```\n\n&nbsp;\n\n[^security]: Your code should **never** contain authentication info, especially when using GitHub. In this case, I created an OS environment variable called `GITHUB_TOKEN` containing my Personal Access Token, which `GH` then uses to make authenticated requests.\n\n## Next Week {data-state=\"hide-menubar\"}\n\n* Data Cleaning\n* Tidy Data","srcMarkdownNoYaml":"\n\n## What We'll Cover Today\n\n<ul class=\"menu\"></ul>\n\n::: {.hidden}\n```{r,echo=FALSE}\nset.seed(1948)\nknitr::opts_template$set(\n    tikz_settings = list(fig.ext = \"svg\", fig.align = \"center\", engine.opts = list(dvisvgm.opts = \"--font-format=woff\"))\n  )\n```\n:::\n\n## Data Gathering {data-name=\"Data Gathering\"}\n\n* Preexisting data sources\n* Web scraping\n* Converting between formats\n\n## Preexisting Data Sources\n\n* Depending on your field, or the type of data you're looking for, there may be a \"standard\" data source!\n* e.g., in *Economics*, for US data, FRED\n\n## Web Scraping\n\n* Fun fact: you can view a webpage's **HTML source code** by right-clicking on the page and selecting \"View Source\"\n  * On older websites, this means we can just request `https://www.page.com` and parse the returned HTML\n* Less fun fact: modern web frameworks like **React** or **Next.js** generate pages dynamically using JS, meaning that what you see on the page will not be visible in the HTML source\n  * Data scraping still possible for these websites, however, using browser automation tools like <a href=\"https://www.selenium.dev/\" target=\"_blank\">**Selenium**</a>\n\n## Scraping Difficulty\n\n| | How is data loaded? | Solution |\n|-|-|-|\n| **Easy** | Data in HTML source | \"View Source\" |\n| **Medium** | Data loaded dynamically via API | \"View Source\", find API call, request programmatically |\n| **Hard** | Data loaded dynamically via web framework | Use <a href=\"https://www.selenium.dev/\" target=\"_blank\">Selenium</a> |\n\n## Data Formats\n\n* The most common formats, for most fields[^dbs]:\n  * `.csv`: Comma-Separated Values\n  * `.tsv`: Tab-Separated Values\n  * `.json`: JavaScript Object Notation\n  * `.xls`/`.xlsx`: Excel format\n  * `.dta`: Stata format\n\n[^dbs]: This is considering only cases where the data comes in the form of individual **files**. There are also **database** formats like SQL and MongoDB (which we'll learn about later on) where data is spread over many files and obtained via database **queries**.\n\n## `.csv` / `.tsv`\n\n::: columns\n::: {.column width=\"47%\"}\n\nüëç\n\n```csv {filename=\"mydata.csv\"}\nindex,var_1,var_2,var_3\nA,val_A1,val_A2,val_A3\nB,val_B1,val_B2,val_B3\nC,val_C1,val_C2,val_C3\nD,val_D1,val_D2,val_D3\n```\n\n::: {.small-codeblock}\n\nüëé\n\n```csv {filename=\"mydata.tsv\"}\nindex var_1 var_2 var_3\nA val_A1  val_A2  val_A3\nB val_B1  val_B2  val_B3\nC val_C1  val_C2  val_C3\nD val_D1  val_D2  val_D3\n```\n\n:::\n\n:::\n::: {.column width=\"6%\"}\n&rarr;\n:::\n\n::: {.column width=\"47%\"}\n\n::: {.fw-table .small-table .r-stretch}\n\n```{r}\n#| label: sample-csv\nlibrary(readr)\ndata <- read_csv(\"./assets/data/ch02/mydata.csv\")\ndata\n# | index | var_1 | var_2 | var_3 |\n# | - | - | - | - |\n# | A | val_A1 | val_A2 | val_A3 |\n# | B | val_B1 | val_B2 | val_B3 |\n# | C | val_C1 | val_C2 | val_C3 |\n# | D | val_D1 | val_D2 | val_D3 | \n```\n\n:::\n\n:::\n:::\n\n* Python: `pd.read_csv()` (from Pandas library)\n* R: `read_csv()` (from `readr` library)\n\n## `.json`\n\n::: {.smallish-codeblock}\n\n```json {filename=\"courses.json\"}\n{\n  \"dsan5000\": {\n    \"title\": \"Data Science and Analytics\",\n    \"credits\": 3,\n    \"lectures\": [\n      \"Intro\",\n      \"Tools and Workflow\"\n    ]\n  },\n  \"dsan5100\": {\n    \"title\": \"Probabilistic Modeling and Statistical Computing\",\n    \"credits\": 3,\n    \"lectures\": [\n      \"Intro\",\n      \"Conditional Probability\"\n    ]\n  }\n}\n```\n:::\n\n* Python: <a href=\"https://docs.python.org/3/library/json.html\" target=\"_blank\">`json`</a> (built-in library</a>, `import json`)\n* R: <a href=\"https://cran.r-project.org/web/packages/jsonlite/index.html\" target=\"_blank\">`jsonlite`</a> (`install.packages(jsonlite)`)\n* <a href=\"https://jsonlint.com/\" target=\"_blank\">Helpful validator</a> (for when `.json` file won't load)\n\n## Other Formats\n\n* `.xls`/`.xlsx`: Requires special libraries in Python/R\n  * Python: <a href=\"https://openpyxl.readthedocs.io\" target=\"_blank\">`openpyxl`</a>\n  * R: <a href=\"https://readxl.tidyverse.org/\" target=\"_blank\">`readxl`</a> (part of tidyverse)\n* `.dta`: Stata format, but can be read/written to in Python/R\n  * Python: Pandas has built-in `pd.read_stata()` and `pd.to_stata()`\n  * R: `read_dta()` from <a href=\"https://haven.tidyverse.org/reference/read_dta.html\" target=\"_blank\">Haven</a> library (part of tidyverse)\n\n## APIs {data-name=\"APIs\"}\n\n* **A**pplication **P**rogramming **I**nterfaces: the \"developer-facing\" part of a data pipeline/service\n* Can think of it like...\n  * an electrical outlet: you just want **electricity** from it, without knowing details of Alternating/Direct Currents\n  * water fountain: you just want **water** from it, without knowing details of how it's pumped into the fountain\n  * car: you just want to accelerate, brake, and reverse, without knowing details of combustion engine\n\n## What Does an API Do?\n\n* Exposes **endpoints** for use by other developers, without requiring them to know the nuts and bolts of your pipeline/service\n* In our examples...\n  * Electrical outlet: endpoint is **socket**, wiring not exposed\n  * Water fountain: endpoint is **aerator**, pump not exposed\n  * Car: endpoint is **pedals**, **steering wheel**, etc... engine is not exposed\n\n::: {.notes}\n\nWhen I'm teaching programming to students in refugee camps who may have never used a computer before, I try to use the idea of \"robots\": a program is a robot trained to sit there and wait for inputs, then process them in some way and spit out some output. APIs really capture this notion, honestly.\n\n:::\n\n## Example: Math API\n\n* Base URL: <a href=\"https://newton.vercel.app/api/v2/\" target=\"_blank\">`https://newton.vercel.app/api/v2/`</a>\n* The **endpoint**: `factor`\n* The **argument**: `\"x^2 - 1\"`\n* The **request**: <a href=\"https://newton.vercel.app/api/v2/factor/x^2-1\" target=\"_blank\">`https://newton.vercel.app/api/v2/factor/x^2-1`</a>\n```{r}\n#| label: math-api-call\n#| echo: true\n#| code-fold: show\nlibrary(httr2)\nrequest_obj <- request(\"https://newton.vercel.app/api/v2/factor/x^2-1\")\nresponse_obj <- req_perform(request_obj)\nwriteLines(response_obj %>% resp_body_string())\n```\n\n## Math API Endpoints {.smaller}\n\n| Operation | API Endpoint | Result |\n| - | - | - |\n| Simplify | `/simplify/2^2+2(2)` | `8` |\n| Factor | `/factor/x^2 + 2x` | `x (x + 2)` |\n| Derive | `/derive/x^2+2x` | `2 x + 2` |\n| Integrate | `/integrate/x^2+2x` | `1/3 x^3 + x^2 + C` |\n| Find 0's | `/zeroes/x^2+2x` | `[-2, 0]` |\n| Find Tangent | `/tangent/2|x^3` | `12 x + -16` |\n| Area Under Curve | `/area/2:4|x^3` | `60` |\n| Cosine | `/cos/pi` | `-1` |\n| Sine | `/sin/0` | `0` |\n| Tangent | `/tan/0` | `0` |\n\n<!-- | Inverse Cosine | `/arccos/1` | `0` |\nInverse Sine \t/arcsin/0 \t0\nInverse Tangent \t/arctan/0 \t0\nAbsolute Value \t/abs/-1 \t1\nLogarithm \t/log/2l8 \t3 -->\n\n## Scraping HTML with `httr2` and `xml2`\n\n<a href=\"https://httr2.r-lib.org/\" target=\"_blank\">`httr2` Documentation</a> | <a href=\"https://xml2.r-lib.org/\" target=\"_blank\">`xml2` Documentation</a>\n\n```{r}\n#| label: httr2-example\n#| echo: true\n#| code-fold: show\n# Get HTML\nlibrary(httr2)\nrequest_obj <- request(\"https://en.wikipedia.org/wiki/Data_science\")\nresponse_obj <- req_perform(request_obj)\n# Parse HTML\nlibrary(xml2)\nhtml_obj <- response_obj %>% resp_body_html()\nhtml_obj %>% xml_find_all('//h2//span[@class=\"mw-headline\"]')\n```\n\n::: {.aside}\n\nNote: `httr2` is a re-written version of the original `httr` package, which is now deprecated. You'll still see lots of code using `httr`, however, so it's good to know how both versions work. <a href=\"https://cran.r-project.org/web/packages/httr/vignettes/quickstart.html\" target=\"_blank\">Click here for a helpful vignette</a> on the original `httr` library.\n\n:::\n\n## Navigating HTML with XPath\n\n<a href=\"https://devhints.io/xpath\" target=\"_blank\">XPath Cheatsheet</a>\n\n* Notice the last line on the previous slide:\n\n```r\nhtml_obj %>% xml_find_all('//h2//span[@class=\"mw-headline\"]')\n```\n\n* The string passed to `xml_find_all()` is an **XPath selector**\n\n::: {.aside}\n\nXPath selectors are used by many different libraries, including **Selenium** (which we'll look at very soon) and **jQuery** (a standard extension to plain JavaScript allowing easy searching/manipulation of the DOM), so it's good to learn it now!\n\n:::\n\n## XPath I: Selecting Elements\n\n```html {filename=\"mypage.html\"}\n<div class=\"container\">\n  <h1>Header</h1>\n  <p id=\"page-content\">Content</p>\n  <img class=\"footer-image m-5\" src=\"footer.png\">\n</div>\n```\n\n* `'//div'` matches all elements `<div>` in the document:\n\n    ```html\n    <div class=\"container\">\n      <h1>Header</h1>\n      <p id=\"page-content\">Content</p>\n      <img class=\"footer-image m-5\" src=\"footer.png\">\n    </div>\n    ```\n* `'//div//img'` matches `<img>` elements which are **children of** `<div>` elements:\n\n    ```html\n    <img class=\"footer-image m-5\" src=\"footer.png\">\n    ```\n\n## XPath II: Filtering by Attributes {.smaller}\n\n\n\n```html {filename=\"mypage.html\"}\n<div class=\"container\">\n  <h1>Header</h1>\n  <p id=\"page-content\">Content</p>\n  <img class=\"footer-image m-5\" src=\"footer.png\">\n</div>\n```\n\n* `'//p[id=\"page-content\"]'` matches all `<p>` elements with id `page-content`[^unique-id]:\n\n    ```html\n    <p id=\"page-content\">Content</p>\n    ```\n* Matching **classes** is a bit trickier:\n\n    [`'//img[contains(concat(\" \", normalize-space(@class), \" \"), \" footer-image \")]'`]{.small-codeblock}\n\n    matches all `<img>` elements with `page-content` as one of their classes[^multi-class]\n\n    ```html\n    <img class=\"footer-image m-5\" src=\"footer.png\">\n    ```\n\n[^unique-id]: In HTML, `id`s are required to be **unique** to particular elements (and elements cannot have more than one `id`), meaning that this should only return a **single** element, for valid HTML code (not followed by all webpages!). Also note the **double-quotes** after `id=`, which are required in XPath.\n\n[^multi-class]: Your intuition may be to just use `'//img[@class=\"footer-image\"]'`. Sadly, however, this will match only elements with `footer-image` as their **only** class. i.e., it will match `<img class=\"footer-image\">` but not `<img class=\"footer-image another-class\">`. This will usually fail, since most elements on modern webpages have several classes. For example, if the site is using <a href=\"https://getbootstrap.com/docs/5.3/getting-started/introduction/\" target=\"_blank\">Bootstrap</a>, `<p class=\"p-5 m-3\"></p>` creates a paragraph element with a padding of 5 pixels and a margin of 3 pixels.\n\n## Authentication\n\n* Most APIs don't allow requests to be made by anonymous requesters, and require **authentication**.\n* For example, to access private GitHub repos using GitHub's API, you'll need to authenticate that you are in fact the one making the request\n\n## Authentication via `GH`\n\n* The `GH` library for `R` can handle this authentication process for you. For example, <a href=\"https://github.com/jpowerj/private-repo-test/\" target=\"_blank\">this private repo</a> in my account does not show up if requested anonymously, but does show up when requested using `GH` with a Personal Access Token[^security]:\n\n```{r}\n#| label: gh-authenticate\n#| echo: true\n#| code-fold: show\nlibrary(gh)\n# We use tryCatch so that code still runs even if (a) GITHUB_TOKEN isn't set, or (b) no internet connection\nsuccess <- FALSE\nresult <- tryCatch( \n  {\n    gh(\"GET /repos/jpowerj/private-repo-test\")\n    success <- TRUE\n  },\n  error = function(e) {\n    success <- FALSE\n    writeLines(\"Could not fetch github repo\")\n  }\n)\nif (success) {\n    writeLines(paste0(result$name, \": \",result$description))\n}\n```\n\n&nbsp;\n\n[^security]: Your code should **never** contain authentication info, especially when using GitHub. In this case, I created an OS environment variable called `GITHUB_TOKEN` containing my Personal Access Token, which `GH` then uses to make authenticated requests.\n\n## Next Week {data-state=\"hide-menubar\"}\n\n* Data Cleaning\n* Tidy Data"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","metadata-files":["./_bookdown.globals.yml"],"toc":true,"output-file":"02-data-gathering.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","bibliography":["references.bib","./assets/data/Georgetown_Refs.bib"],"theme":"cosmo","title":"Data Gathering and APIs","subtitle":"*DSAN 5000: Data Science and Analytics*","date":"last-modified","institute":"<a href=\"mailto:jj1088@georgetown.edu\">`jj1088@georgetown.edu`</a>","author":"Jeff Jacobs","categories":["Lecture Slides"],"footnotes-hover":true,"scrollable":true},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","metadata-files":["./_bookdown.globals.yml"],"output-file":"02-data-gathering.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt","title":"Data Gathering and APIs","subtitle":"*DSAN 5000: Data Science and Analytics*","date":"last-modified","institute":"<a href=\"mailto:jj1088@georgetown.edu\">`jj1088@georgetown.edu`</a>","author":"Jeff Jacobs","categories":["Lecture Slides"]},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}